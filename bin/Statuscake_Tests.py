import os
import sys
import time
import datetime
import httplib2
import urllib

sys.path.append('../')
from splunklib import modularinput as smi



'''
    This file is auto generated by Add-on Builder.
    Do not edit this file!!! It will be overwritten
    by Add-on Builder.
'''
class MyScript(smi.Script):

    def __init__(self):
        super(MyScript, self).__init__()
        self._canceled = False

    # GET SCHEME BEGIN
    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = smi.Scheme("Statuscake_Tests")
        scheme.title = ("Statuscake_Tests")
        scheme.description = ("Statuscake Test Pull")
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True
        scheme.use_single_instance = False

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))
        scheme.add_argument(smi.Argument("placeholder", title="Placeholder",
                                        description="Do not set any value to this",
                                        required_on_create=False))
        return scheme
    # GET SCHEME END

    def validate_input(self, definition):
        """overloaded splunklib modularinput method"""
        pass

    def stream_events(self, inputs, ew):
        """overloaded splunklib modularinput method"""
        # use simple rest call to load the events
        self.header = {}
        self.data = {}
        self.url = 'https://www.statuscake.com/API/Tests/'
        self.rest_method = 'GET'
        self.header["TestID"] = "1105966"
        self.header["Username:"] = "Camsupport247"
        self.header["API:"] = "TwjxBcNOudeeFu49BOLe"

        self.input_name, self.input_items = inputs.inputs.popitem()
        self.output_index = self.input_items['index']
        self.output_sourcetype = self.input_items['sourcetype']

        try:
            http_cli = httplib2.Http(timeout=10, disable_ssl_certificate_validation=True)
            resp, content = http_cli.request(self.url, method=self.rest_method, body=urllib.urlencode(self.data), headers=self.header)

            event = smi.Event(source=self.input_name, index=self.output_index, sourcetype=self.output_sourcetype, data=content.decode('utf-8',errors='ignore'))
            ew.write_event(event)
        except Exception as e:
            raise e


if __name__ == "__main__":
    exitcode = MyScript().run(sys.argv)
    sys.exit(exitcode)
